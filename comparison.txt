We want to run test cases to be able to compare the 
performance of mergeSort vs quickSort. 

    Case 1 : Random, Small(N=10) : {34, 56, 87, 41, 40,  
                                    90, 13, 60, 73, 56}

    Case 2 : Random, Medium(N=40) : {97, 35, 30,11,	75,
                                    57, 40, 14, 15, 49,
                                    77, 29, 50, 47, 89,
                                    74, 13, 50, 86, 7,
                                    50, 65, 48, 2,	100,
                                    24, 4,	54,	100,79,
                                    71, 65, 21, 36, 68,
                                    56, 72, 100,28, 74}
                                    
    Case 3 : Random, Large(N=125) : {3,	69,	14,	69, 17,
                                    71, 78, 67, 31, 100,
                                    83, 45, 11, 97, 8,
                                    68, 47, 76, 33, 58,
                                    43, 37, 69, 25, 45,
                                    37, 71, 72, 76, 55,
                                    61, 15, 73, 16, 86,
                                    51, 10, 91, 14, 20,
                                    60, 37, 61, 5, 8,
                                    88, 81, 23, 50, 74,
                                    19, 96, 14, 34, 83,
                                    83, 61, 92, 43, 26,
                                    38, 68, 33, 71, 72,
                                    98, 39, 44, 20, 34,
                                    26, 96, 95, 47, 57,
                                    97, 67, 83, 83, 68,
                                    69, 17, 57, 21, 45,
                                    26, 17, 39, 25, 4,
                                    69, 91, 86, 80, 6,
                                    4,	7, 35, 83, 66,
                                    1,	28, 14, 7, 9,
                                    57, 95, 100, 90, 5,
                                    47, 52, 65, 6, 100,
                                    34, 75, 28, 30, 72,
                                    88, 67, 46, 81, 54}

    Case 4 : Nearly sorted, Small(N=10) : {13, 34, 56, 41, 40,  
                                        60, 73, 56, 90, 87}

    Case 5 : Nearly sorted, Medium(N=40) : {2, 4, 7, 11, 21,
                                            24, 28, 29, 13, 15,
                                            50, 30, 35, 49, 50,
                                            56, 36,  47, 48, 50,
                                            57, 65, 40, 14, 54,
                                            71, 72, 74, 65, 68,
                                            74, 75, 89, 100, 79,
                                            77, 86, 97, 100, 100}
                                    
    Case 6 : Nearly sorted, Large(N=125) : {1, 3, 9, 10, 5,
                                            4, 4, 5, 6, 6, 
                                            7, 7, 8, 14, 14, 
                                            15, 16, 17, 17, 17,
                                            19, 20, 20, 21, 25,
                                            26, 8, 11, 14, 14,
                                            26, 26,	28, 28, 30, 
                                            31, 33,  34, 23, 25,
                                            34, 34, 35, 37, 33,
                                            37, 37, 38, 39, 39,
                                            43, 43, 44, 45, 46,
                                            51, 47, 47, 47, 50,
                                            57, 58, 52, 54, 55,
                                            60, 61, 45, 57, 57,
                                            61, 61, 66, 67, 67, 
                                            68, 68,	69, 65, 69,
                                            69, 76, 69, 69, 45,
                                            71, 71, 71, 72, 72, 
                                            72, 73, 74, 67, 68,
                                            75, 78, 80, 81, 81,
                                            83, 83, 83, 83, 83,
                                            83, 88, 86, 86, 76,
                                            88, 90, 91, 95, 96,
                                            97, 97, 91, 92, 95,
                                            98, 100, 100, 100, 96}

Trial Records
    MERGE SORT
    1: 38900, 24400, 23900, 34000
    2: 72300, 40900, 84100, 51700
    3: 92900, 327600, 415800, 126800
    4: 50100, 22900, 42600, 56600
    5: 77400, 49000, 95400, 105500
    6: 219000, 222200, 86900, 307700

    QUICK SORT
    1: 30000, 16100, 15700, 12500
    2: 55700, 27700, 46100, 25600
    3: 456100, 494000, 481800, 144800
    4: 20900, 20900, 13100, 16200
    5: 25400, 154000, 45700, 84100
    6: 235000, 279200, 130700, 346800

Averages
    _________________________________________________
    | Time (ns)     | Merge         | Quick         |
    -------------------------------------------------
    | Random,       | 30300         | 18575         |
    | Small         |               |               |
    -------------------------------------------------
    | Random,       | 62250         | 38775         |
    | Medium        |               |               |
    -------------------------------------------------
    | Random,       | 240775        | 394175        |
    | Large         |               |               |
    -------------------------------------------------
    | Semi-sorted,  | 43050         | 17775         |
    | Small         |               |               |
    -------------------------------------------------
    | Semi-sorted,  | 81825         | 77300         |
    | Medium        |               |               |
    -------------------------------------------------
    | Semi-sorted,  | 208950        | 247925        |
    | Large         |               |               |
    -------------------------------------------------

Conclusion
    Using the limited data we have analyzed we can assume a few things. 
    
    Firstly, performance by merge sort surpasses quick sort when the input
    is sufficiently large. This is true for both random and semi-sorted lists.

    Next, semi-sorting has an unpredictable effect on performance.
    It seems to actually hinder performance for merge sort except for large inputs.
    The results of quick sort is consistent with this and is excarbated.
    More testing is needed for a confident claim about nearly sorted lists.

    Data aside, we can use critical thinking from knowledge:

        Quick sort:
            - Sorting should be useful if the data is normally distributed,
                because it encourages a median that will create even sublists.
                
        Merge sort:
            - Sorting probably wouldn't have a huge effect on performance.
              The algorithm would still recurse all the way to the single input.
            - Has less expensive reads, which is why it works better with 
              larger data sets.

